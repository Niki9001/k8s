Pod 概念
自主式 Pod

控制器管理的 Pod
ReplicationController & ReplicaSet & Deployment
  ReplicationController用来确保容器应用的副本数十种保持在用户定义的副本数，即如果有容器异常退出，会自动创建新的Pod来替代；而如果异常多出来的容器也会自动回收。
  在新版本的k8s中建议使用 ReplicaSet 来取代 ReplicationController
  
  ReplicaSet 跟 ReplicationController 没有本质的不同，知识名字不一样，并且ReplicaSet支持集合式的selector
  
  虽然ReplicaSet 可用独立使用，但一般还建议用Deployment来自动管理ReplicaSet，这样就无需担心跟其他机制的不可兼容问题（比如 ReplicaSet 不支持 rolling-uddate
  但 Deployment 支持）
  
  > HPA (HorizontalPodAutoscaling)
    Horizontal Pod Autoscaleing仅适用于 Deployment 和 ReplicaSet，在V1版本仅支持根据 Pod 的 CPU 利用率扩容所，在 vlapha 版本中，支持根据内存和用户自定
    义的 metric 扩缩容
    
StatefulSet 是为了解决有状态服务的问题（对应Deployments和ReplicaSets式为无状态服务而设计），其应用场景包括：
  稳定持久化的存储，即 Pod 重新调度后还是能访问到相同的持久化数据，基于 PVC 来实现
  
  稳定的网络标志，即 Pod 重新调度后其 PodName 和 HostName 不变，基于 Headless Service （即没有 Cluster IP 的 Service）来实现
  
  有序部署，有序扩展，即 Pod 是有顺序的，在部署或者扩展的时候要依据定义的顺序依次进行（即从 0 到 N-1，在下一个 Pod 运行之前所有之前的 Pod 必须都是 Running
   和 Ready 状态），基于 init container 来实现
  
  有序收缩，有序删除（即从 N-1 到 0）
  
DaemonSet 确保全部（或者一些）Node 上运行一个 Pod 的副本。当有 Node 加入集群时，也会为他们新增一个 Pod。当有 Node 从集群移除时，这些 Pod 也会被回收。
删除 DaemonSet 将会删除它创建的所有 Pod
使用 DaemonSet 的一些典型用法：
  运行集群存储 daemon，例如在每个 Node 上运行 glusterd、ceph。
  在每个 Node 上运行日志收集 daemon，例如fluentd、logstash。
  在每个 Node 上监控 daemon，例如 Prometheus Node Exporter
  
Job 负责批处理任务，即仅执行一次的任务，它保证批处理任务的一个或多个 Pod 成功结束

Cron Job 管理基于时间的 Job，即：
  在给定时间点只运行一次
  周期性地在给定的时间点运行


